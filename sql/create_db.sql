SET @@global.time_zone = '+02:00';
SET storage_engine=InnoDB;
SET FOREIGN_KEY_CHECKS=1;

DROP DATABASE IF EXISTS registrochiesa;
CREATE DATABASE IF NOT EXISTS registrochiesa;
USE registrochiesa;

DROP TABLE IF EXISTS partecipanti;
DROP TABLE IF EXISTS lavoratori;
DROP TABLE IF EXISTS programma;
DROP TABLE IF EXISTS servizi;
DROP TABLE IF EXISTS squadre;
DROP TABLE IF EXISTS utenti;
DROP TABLE IF EXISTS giorni;
DROP TABLE IF EXISTS ruoli;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS anni;

DROP FUNCTION IF EXISTS RINT;
DROP TRIGGER IF EXISTS addUID;

CREATE FUNCTION RINT(vmin INT, vmax INT)
RETURNS INT
COMMENT 'Genera un intero casuale tra vmin e vmax inclusi'
RETURN FLOOR(vmin + RAND() * (vmax - vmin + 1));

CREATE TABLE utenti (
	ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	UID MEDIUMINT UNSIGNED UNIQUE,
	nome VARCHAR(32) NOT NULL,
	cognome VARCHAR(32) NOT NULL
);

-- https://stackoverflow.com/questions/37680461/how-to-store-mysql-trigger-exception-failure-info-into-table-or-in-variables

CREATE TRIGGER addUID BEFORE INSERT ON utenti FOR EACH ROW SET NEW.UID = RINT(1000000, 9999999);

CREATE TABLE servizi (
	nome VARCHAR(64) PRIMARY KEY,
	descrizione TEXT NOT NULL
);

CREATE TABLE programma (
	pdata DATE,
	servizio VARCHAR(64),
	descrizione TEXT,
	PRIMARY KEY (pdata, servizio),
	FOREIGN KEY (servizio)
		REFERENCES servizi(nome) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

CREATE TABLE anni (
	ID SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	servizio VARCHAR(64),
	prezzo SMALLINT UNSIGNED NOT NULL,
	dataInizio DATE NOT NULL,
	dataFine DATE NOT NULL,
	UNIQUE (dataInizio, dataFine),
	FOREIGN KEY (servizio)
		REFERENCES servizi(nome) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

CREATE TABLE ruoli (
	ID TINYINT,
	servizio VARCHAR(64),
	livello TINYINT,
	PRIMARY KEY (ID, servizio, livello),
	FOREIGN KEY (servizio)
		REFERENCES servizi(nome) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
);

CREATE TABLE staff (
	ID INT UNSIGNED PRIMARY KEY,
	nickname VARCHAR(20) UNIQUE,
	password CHAR(64) NOT NULL,
	ruolo TINYINT,
	FOREIGN KEY (ID)
		REFERENCES utenti(ID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (ruolo)
		REFERENCES ruoli(ID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE 
);

CREATE TABLE squadre (
	ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	nome VARCHAR(64),
	anno SMALLINT UNSIGNED,
	capo MEDIUMINT UNSIGNED,
	UNIQUE (nome, anno),
	FOREIGN KEY (anno)
		REFERENCES anni(ID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (capo)
		REFERENCES utenti(UID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE 
);

CREATE TABLE lavoratori (
	UID MEDIUMINT UNSIGNED,
	anno SMALLINT UNSIGNED,
	squadra INT UNSIGNED,
	PRIMARY KEY (UID, anno),
    FOREIGN KEY (UID)
		REFERENCES utenti(UID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (squadra)
		REFERENCES squadre(ID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (anno)
		REFERENCES anni(ID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE 
);

CREATE TABLE partecipanti (
	UID MEDIUMINT UNSIGNED,
	anno SMALLINT UNSIGNED,
    squadra INT UNSIGNED,
	accompagnatore VARCHAR(64),
	PRIMARY KEY (UID, anno),
    FOREIGN KEY (UID)
		REFERENCES utenti(UID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE,
    FOREIGN KEY (squadra)
		REFERENCES squadre(ID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (anno)
		REFERENCES anni(ID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE 
);

CREATE TABLE giorni (
	gdata DATE,
	UID MEDIUMINT UNSIGNED,
	temperatura DECIMAL(3, 1),
	assente TINYINT(1) NOT NULL,
	comportamento TINYINT(1),
	motivo TEXT,
	PRIMARY KEY (gdata, UID),
    FOREIGN KEY (UID)
		REFERENCES utenti(UID) 
		ON DELETE CASCADE
		ON UPDATE CASCADE,
	FOREIGN KEY (gdata)
		REFERENCES programma(pdata) 
		ON DELETE CASCADE
		ON UPDATE CASCADE
);